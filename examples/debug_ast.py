#!/usr/bin/env python3

"""
Debug script to understand the AST structure generated by tree-sitter-haskell.
"""

import haskell_tree_sitter

def debug_ast():
    sample_haskell = """
module Main where

import Data.List
import qualified Data.Map as Map

-- | A simple factorial function
factorial :: Integer -> Integer
factorial 0 = 1
factorial n = n * factorial (n - 1)

-- | Fibonacci sequence
fibonacci :: Int -> Int
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2)

-- | A simple data type
data Person = Person 
    { name :: String
    , age :: Int
    } deriving (Show, Eq)

-- | Type class for things that can be greeted
class Greetable a where
    greet :: a -> String

-- | Instance of Greetable for Person
instance Greetable Person where
    greet person = "Hello, " ++ name person ++ "!"

main :: IO ()
main = do
    putStrLn "Testing Haskell AST chunking"
    print (factorial 5)
    print (fibonacci 10)
    """
    
    print("=== Debug AST Structure ===")
    
    try:
        node_types = haskell_tree_sitter.debug_haskell_ast_nodes(sample_haskell)
        print(f"Found {len(node_types)} nodes in the AST:")
        print()
        
        for i, node_type in enumerate(node_types):
            print(f"{i+1:3d}: {node_type}")
            
        print("\n=== Unique Node Types ===")
        unique_types = set(node.strip() for node in node_types)
        for node_type in sorted(unique_types):
            print(f"  {node_type}")
            
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    debug_ast()