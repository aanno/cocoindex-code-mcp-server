# made from perplexity based on lib.rs

from typing import Optional, List, Dict, Tuple, Any

class HaskellParser:
    def __init__(self) -> None: ...
    def parse(self, source: str) -> Optional["HaskellTree"]: ...

class HaskellTree:
    def root_node(self) -> HaskellNode: ...

class HaskellNode:
    def kind(self) -> str: ...
    def start_byte(self) -> int: ...
    def end_byte(self) -> int: ...
    def start_position(self) -> Tuple[int, int]: ...
    def end_position(self) -> Tuple[int, int]: ...
    def child_count(self) -> int: ...
    def is_named(self) -> bool: ...
    def is_error(self) -> bool: ...

class HaskellChunk:
    def text(self) -> str: ...
    def start_byte(self) -> int: ...
    def end_byte(self) -> int: ...
    def start_line(self) -> int: ...
    def end_line(self) -> int: ...
    def node_type(self) -> str: ...
    def metadata(self) -> Dict[str, str]: ...

class ErrorNodeStats:
    def error_count(self) -> int: ...
    def nodes_with_errors(self) -> int: ...
    def should_fallback(self) -> bool: ...
    def uncovered_ranges(self) -> List[Tuple[int, int]]: ...

class ChunkingResult:
    def chunks(self) -> List[HaskellChunk]: ...
    def error_stats(self) -> ErrorNodeStats: ...
    def chunking_method(self) -> str: ...
    def coverage_complete(self) -> bool: ...

class ChunkingParams:
    def __init__(self, chunk_size: int, min_chunk_size: int, chunk_overlap: int, max_chunk_size: int) -> None: ...
    def chunk_size(self) -> int: ...
    def min_chunk_size(self) -> int: ...
    def chunk_overlap(self) -> int: ...
    def max_chunk_size(self) -> int: ...

def parse_haskell(source: str) -> Optional[HaskellTree]: ...
def get_haskell_separators() -> List[str]: ...
def get_haskell_ast_chunks(source: str) -> List[HaskellChunk]: ...
def get_haskell_ast_chunks_enhanced(source: str) -> ChunkingResult: ...
def get_haskell_ast_chunks_with_fallback(source: str) -> List[HaskellChunk]: ...
def get_haskell_ast_chunks_with_params(source: str, params: ChunkingParams) -> ChunkingResult: ...
def debug_haskell_ast_nodes(source: str) -> List[str]: ...
