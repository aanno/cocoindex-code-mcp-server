{
  // Test cases for hybrid search functionality
  // Each test contains: name, query, and expected results (excerpts)
  "tests": [
    {
      "name": "basename_python_language_filter",
      "description": "Search for 'basename' with Python language filter - should find files with proper metadata",
      "query": {
        "vector_query": "basename",
        "keyword_query": "language:Python"
      },
      "expected_results": {
        "should_contain": [
          {
            "filename_pattern": ".*cpp_visitor\\.py$",
            "expected_metadata": {
              "imports": ["logging", "typing"],
              "classes": ["CppASTVisitor"],  
              "functions": ["analyze_cpp_code"],
              "complexity_score": ">0",
              "line_count": ">50",
              "char_count": ">1000",
              "has_classes": true,
              "analysis_method": "!unknown"
            },
            "should_not_be_empty": ["code", "imports", "classes", "functions"]
          }
        ],
        "min_results": 1
      }
    },
    {
      "name": "ast_visitor_search",
      "description": "Search for AST visitor related code",
      "query": {
        "vector_query": "AST visitor pattern",
        "keyword_query": "language:Python"
      },
      "expected_results": {
        "should_contain": [
          {
            "filename_pattern": ".*visitor.*\\.py$",
            "expected_metadata": {
              "classes": "!empty",
              "functions": "!empty", 
              "imports": "!empty",
              "complexity_score": ">0",
              "analysis_method": "!unknown"
            }
          }
        ],
        "min_results": 2
      }
    },
    {
      "name": "python_handler_search",
      "description": "Search for Python language handler",
      "query": {
        "vector_query": "python handler",
        "keyword_query": "language:Python filename:python_handler"
      },
      "expected_results": {
        "should_contain": [
          {
            "filename_pattern": ".*python_handler\\.py$",
            "expected_metadata": {
              "classes": "!empty",
              "functions": "!empty",
              "imports": "!empty",
              "has_classes": true,
              "analysis_method": "!unknown"
            }
          }
        ],
        "min_results": 1
      }
    },
    {
      "name": "complex_function_search",
      "description": "Search for complex functions with high complexity",
      "query": {
        "vector_query": "complex algorithm implementation",
        "keyword_query": "language:Python complexity:>5"
      },
      "expected_results": {
        "should_contain": [
          {
            "expected_metadata": {
              "complexity_score": ">5",
              "functions": "!empty",
              "code": "!empty",
              "analysis_method": "!unknown"
            }
          }
        ],
        "min_results": 1
      }
    },
    {
      "name": "class_search",
      "description": "Search for files containing classes",
      "query": {
        "vector_query": "class definition",
        "keyword_query": "language:Python has_classes:true"
      },
      "expected_results": {
        "should_contain": [
          {
            "expected_metadata": {
              "classes": "!empty",
              "has_classes": true,
              "code": "!empty",
              "analysis_method": "!unknown"
            }
          }
        ],
        "min_results": 3
      }
    }
  ],
  "test_metadata": {
    "version": "1.0",
    "description": "Hybrid search integration tests to validate proper code analysis and metadata extraction",
    "notes": [
      "Tests should validate that files are properly analyzed with correct metadata",
      "Empty code fields indicate analysis failures",
      "analysis_method should not be 'unknown' for proper analysis",
      "Patterns use regex matching, ! prefix means 'not equal'",
      "> prefix means 'greater than' for numeric comparisons"
    ]
  }
}